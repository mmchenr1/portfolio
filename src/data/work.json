[
    {
        "name": "Arduino Hero",
        "frameworks": ["Embedded C", "Python", "SAMD MCUs"],
        "timeline": "2.5 months",
        "role": "Creator, System Engineer, Embedded Software Engineer",
        "description_short": "a homemade version of Guitar Hero built with three MCUs",
        "description_long": "Arduino Hero is a homemade version of Guitar Hero, built using Arduino MCUs. It features a custom LED screen and LCD screen controlled by one Arduino MKR1000, a game controller with another MKR1000, and a music player enabled by an Arduino Uno with a music shield. To play Arduino Hero, strum the console bar while pressing the colored buttons on the controller in time with the music and the corresponding notes moving down the LED screen. Players can chose from a selection of songs and view their stats after gameplay ends.",
        "route": "/ArduinoHero",
        "cover_image": "../assets/arduino-hero/arduino-cover.png",
        "main_image": "../assets/arduino-hero/arduino-cover.png",
        "collaborators": "Serena Pulopot, Patrick Ortiz, Nick Bottone, & David Fryd",
        "sections": [
            {
                "title": "Ideation",
                "contents": [
                    {
                        "text": "To start this project, me and a group of friends had the idea to build a fun video game. The idea was to create an embedded system from scratch, using 3D printed materials, wiring, MCUs, and extraneous parts. To accomplish this, we began the development cycle of this embedded system with thorough planning, beginning with defining the system conceptually and then writing formal rule and requirements. As we worked, we created a manual outlining the system to faciliate collaborative development, traceability, system definition, and a smoother integration process."
                    },
                    {
                        "text": "We defined the system to be a single-player game, where a player can select a song from the start menu, triggering a three second countdown. Following this countdown, the music starts and LED notes move down the gameboard in time with the song. A player tries to play the corresponding notes, indicated by color, on the guitar console while strumming the console bar. A player's score, combo, and maximum combo are recorded. Once the song ends, a game over screen is displayed along with scoring data. A player can then choose another song and repeat the cycle."
                    },
                    {
                        "links": [
                            {
                                "name": "Arduino Hero Manual",
                                "link": "../assets/arduino-hero/Arduino_Hero_Manua.pdf"
                            }
                        ]
                    }
                ]
            },
            {
                "title": "Requirements and Architecture",
                "contents": [
                    {
                        "text": "After defining the system conceptually from a user's point of view, I created formal rules and requirements for the system. The full list can be found in the manual. I created these requirements with the intention of defining the full cycle of gameplay, accounting for edge cases such as software hangs and note scoring latency."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }, {
                "title": "State Machine",
                "contents": [
                    {
                        "text": "Next, I created a finite state machine for the Arduino MKR1000 attached to the LED matrix and LCD screen. This MCU controls the gamelogic and sends messages to the peripheral console and music player. I used the architecture diagram created by one of my co-developers to inform this process. Refer to the manual for descriptions of the transitions labelled in the diagram."
                    },
                    {
                        "text": "I also created a traceability matrix that maps the rule and requirements to each of the guards and transitions in the state machine. This traceability matrix ensured that all of the system requirements were accounted for and also was a useful reference when writing test cases."
                    }
                ],
                "full_images": [],
                "inline_images": ["../assets/arduino-hero/state-machine.png"]
            }, {
                "title": "Guitar Console Assembly",
                "contents": [
                    {
                        "text": "After wrapping our planning stage, we began to assemble the hardware. I collaborated with one of my co-developers to build the controller using a 3D printed body featuring buttons soldered to wires that run down the neck of the guitar, attaching to the MKR1000 located in the body. In total, there are seven buttons on the console. Five are in the bridge of the guitar, each corresponding to a color of note, and two in the body that are pressed by pushing the strum bar either up or down."
                    },
                    {
                        "text": "I quickly began writing code to get user input, package it, and send it to the gameboard MCU to be processed in the game logic. First, I wrote a short program that triggers an interrupt when one of the buttons touching the strum bar is pressed. The ISR then polls all seven buttons and creates a byte, populating seven bits according to the buttons pressed. Each button corresponds to one of the bits in the byte and is set to '1' if the button is held down at the time that the interrupt was triggered."
                    },
                    {
                        "text": "I quickly began writing code to get user input, package it, and send it to the gameboard MCU to be processed in the game logic."
                    }
                ],
                "full_images": [],
                "inline_images": ["../assets/arduino-hero/guitar-guts.png"]
            },{
                "title": "Guitar Controller Software",
                "contents": [
                    {
                        "text": "First, I wrote a short program that triggers an interrupt when one of the buttons touching the strum bar is pressed. The ISR then polls all seven buttons and creates a byte, populating seven bits according to the buttons pressed. Each button corresponds to one of the bits in the byte and is set to '1' if the button is held down at the time that the interrupt was triggered."
                    },
                    {
                        "text": "This byte is then passed to a subroutine which manually sending it via UART. We chose to multiplex two pins on the gameboard MKR1000 for UART communication with the controller because we were worried about latency issues in communication between the music player and gameboard arduino, so we reserved the RX and TX pins to run hardware UART communication between those MCUs."
                    }
                ],
                "full_images": ["../assets/arduino-hero/uart-bus.png"],
                "inline_images": []
            }, 
             {
                "title": "Integration",
                "contents": [
                    {
                        "text": "I worked on the integration of both peripherals to the gameboard MCU, working independently on the controller-gameboard integration and with a co-developer on the music player-gameboard integration."
                    },
                    {
                        "subsections": [
                            {
                                "title": "Controller-Gameboard Integration",
                                "contents": [
                                    {
                                        "text": "To integrate the manual UART protocol I created, I wrote software for the gameboard to receive the UART bus sent from the controller. This functionality is in an ISR that is triggered when the receiving pin drop to a low signal, since I used a idle-high framework. This ISR then receives the byte, checks it for corruption via parity, and uses it in the game logic if uncorrupted."
                                    },
                                    {
                                        "text": "This integration process was very smooth, which I attribute to the planning done before we touched hardware or software."
                                    }
                                ]
                            },
                            {
                                "title": "Music Player-Gameboard Integration",
                                "contents": [
                                    {
                                        "text": "Integrating the Arduino Uno with the music shield to the gameboard was a more difficult task. We used the RX and TX pins on both MCUs to facilitate hardware UART comminication, where the gameboard MCU sends signals to start one of the tracks or to stop the music."
                                    },
                                    {
                                        "text": "We debugged this process by creating testing pathways in the sending and receiving code to only run the core functionality to the communication protocol and using the serial monitor to view the bits being received/sent on both ends. Eventually, through manual testing we found the bug and succesfully integrated these components."
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "full_images": [],
                "inline_images": []
            }, {
                "title": "State Machine Code",
                "contents": [
                    {
                        "text": "I also created the state machine code that ultimately runs the gameboard MCU based on the diagram I created during the planning stage. This process involved me leading my co-developers in fitting the pieces of code we had developed together and testing the system to ensure that it meets all the rules and requirements. I really enjoyed collaborating with my team on this process and seeing the system come together."
                    }
                ],
                "full_images": [],
                "inline_images": [],
                "inline_video": "../assets/arduino-hero/arduino_hero_demo.mp4"
            }, {
                "title": "Testing",
                "contents": [
                    {
                        "text": "Throughout the software development process, we performed many manual tests on our components. I created testing pathways in the guitar controller code, state machine code, and integration modules while developing to facilitate manual testing iterations."
                    },
                    {
                        "text": "To wrap up our development, we wrote white box tests for each of the transitions/guards in the finite state machine and also black box testing on the rules and requirements of the system. The white box tests relied on mocked out functions of LCD output to compare to expected system behavior. We recorded all of the tests in a spreadsheet that maps test cases, requirements, variables, and the status of the test."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }, {
                "title": "Takeaways",
                "contents": [
                    {
                        "text": "Throughout the process of building Arduino Hero, I learned many lessons. From all of the experience and skills that I built, my most important takeaways are:"
                    },
                    {
                        "list": [
                            "The planning stage is the most important of a project.",
                            "I enjoy coordinating integration amongst my co-developers and working to fit all the pieces of a project together.",
                            "Writing extra frameworks for manual testing is extremely valuable for running manual tests.",
                           " Traceability is very helpful, especially in the testing stage."
                        ]
                    }
                ],
                "full_images": [],
                "inline_images": []
            }
        ]
    },
    {
        "name": "Music Aggregator",
        "frameworks": ["HTML","React.js", "CSS"],
        "timeline": "2 weeks",
        "role": "Designer, Frontend Developer",
        "description_short": "song aggregator with filtering and sorting",
        "description_long": "I designed an interface that allows users to filter, sort, and favorite songs and then view their favorited songs in an aggregator. In designing the interface, I first analyzed and compared three desktop music platforms with these features: Spotify, Deezer, and Youtube Music. I then took my findings and created my interface using React.js.",
        "route": "/MusicAggregator",
        "cover_image": "../assets/music-aggregator/music-aggregator-cover.png",
        "main_image": "../assets/music-aggregator/my-design.png",
        "collaborators": "",
        "image_link": "https://uiux-development.vercel.app/",
        "sections": [
            {
                "title": "Competitor Analysis",
                "contents": [
                    {
                        "text": "First, I analyzed similar platforms that offer music favoriting and aggregation, along with filtering and sorting options. I compiled my findings into a competitive comparison chart to identify what features I want to include in my design."
                    }
                ],
                "full_images": ["../assets/music-aggregator/comparison-chart.png"],
                "inline_images": []
            },
            {
                "title": "Analysis Findings: Strengths & Weaknesses",
                "contents": [
                    {
                        "text": "Spotify's biggest shortcoming is the lack of sorting within lists of songs, both in song exploration and within the liked songs aggregator. Its success lies primarily in the sleekness of the interface, which presents relevant information about each song without over-cluttering the space."
                    },
                    {
                        "text": "On the other hand, Deezer showcases too much information about each song. This clutter of information poses clarity issues and overwhelms users. Deezer's strength, undoubtedly, is its sorting options available for all song lists, both in the liked songs and explore sections."
                    },
                    {
                        "text": "YouTube Music had the weakest UI, in my opinion. The most obvious issue is the lack of efficiency in liking songs: it takes a user three clicks to add a song to the favorited list, and the favoriting feature is hidden within the UI, causing issues with efficiency and learnability. There are also no sorting options within song lists. I enjoy the easy navigation of filtering songs by moods and genres and consider it one of YouTube Music's few successes in terms of UI."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }
            ,
            {
                "title": "Ideation",
                "contents": [
                    {"text": "From the above competitive analysis, I created the following list of factors and designs to incorporate in my own design:"},
                    {"list": ["Sorting both within discoverable items and within the aggregator", "Hovering over an item shows favorite button (Spotify)",
                        "Delay after unfavoriting an item before it's removed from the aggregator to allow user to refavorite",
                        "Filtering by categories common to items (Youtube Music). In the context of songs, I'd like to expand this to allow for multiple genre filters to be available at once in order to capture more niche sub-genres and cross-genre spaces.",
                        "I'd like to incorporate at least one sort based on the qualities of a song... i.e. if a song is happy or mellow. This will hopefully help users not just sort songs based on their titles or lenght, but also based on the contents of the songs themselves.",
                        "Liking a song takes a single click",
                        "Hovering and button clicks show extraneous information rather than having it visible at all times for each song"]
                    }
                ],
                "full_images": [],
                "inline_images": []
            },
            {
                "title": "Low Fidelity Wireframe",
                "contents": [
                    {
                        "text": "Using these ideas, I created a very basic sketch in Figma of the general layout of my page. I created my design with the intention of allowing users to easily navigate a song discovery panel by having the option to filter and sort. Note that the information necessary to the filters is intended to be displayed in a popup once the user hits the info button on the item card. Also of note, I elected to only feature sorting in the aggregator because the filter bubbles take up a significant amount of vertical space and make the section look cluttered."
                    }
                ],
                "full_images": [],
                "inline_images": ["../assets/music-aggregator/mockup.png"]
            },
            {
                "title": "Development",
                "contents": [
                    {
                        "text": "From this wireframe, I then began coding! I created a React.js web application and dynamically updated liked song histories and filtered/sorted song lists. Additionally, I used the Spotify API to retrieve song data for the song bank used in this web app. Filtering options were chosen based on my previous compeitive analysis and the data available through the API."
                    }
                ],
                "full_images": ["../assets/music-aggregator/my-design.png"],
                "inline_images": []
            },
            {
                "title": "Takeaways",
                "contents": [
                    {
                        "text": "Through this project I learned to balance information necessary for sorting, filtering, and aggregation with good design so that the page doesn't become cluttered and visually overwhelming for users. I also learned the considerations competing song aggregators have to keep in mind when presenting information and interfaces to users."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }
        ]
    },
    {
        "name": "Partiful Profile Design",
        "frameworks": ["Figma"],
        "timeline": "3 weeks",
        "role": "Designer",
        "description_short": "feature design for Partiful mobile app profile pages",
        "description_long": "I worked with Partiful, a startup party planning app, and a team of developers to design new features aimed at boosting user engagement with profiles.",
        "route": "/PartifulProfileDesign",
        "cover_image": "../assets/partiful/partiful-cover.png",
        "main_image":  "../assets/partiful/partiful-cover.png",
        "collaborators": "Sita Pawar, Andy Burris, & Grace Miller",
        "sections": [
            {
                "title": "The Task",
                "contents": [
                    {
                        "text": "We teamed up with Partiful, an event invitation platform, to design features that encourage users to fill out their profiles. Over the timeline of this project, we conferenced with Partiful team members and interatively designed as we received feedback."
                    },
                    {
                        "text":  "For more information about Partiful and the specifics of our work, check out the links below."
                    },
                    {
                        "links": [
                            {
                                "name": "Project Brief",
                                "link": "https://docs.google.com/document/d/19Au37Jwm3JA1r486SNlFD61qZsglyCzhCWDwMwx98HY/edit?usp=sharing"
                            },
                            {
                                "name": "Partiful",
                                "link": "https://partiful.com/"
                            }
                        ]
                    }
                ],
                "full_images": [],
                "inline_images": []
            },
            {
                "title": "Sketching",
                "contents": [
                    {
                        "text": "We started our design process by sketching ideas for different flows. Each developer chose two flows to sketch, adding new features. The first flow I sketched was how users can view people's profiles from the RSVP list for an event. I also sketched a flow for how users can view and interact with a list of mutuals on other's profiles."
                    },
                    {
                        "text":  "In these sketches I had a few initial ideas to incentivize users to fill our profile information:"
                    },
                    {
                        "list": [
                            "Including a \"Party Anthem\" as a fun field to include in a profile. This fills up empty space and is a fun, personal way to show personality.",
                            "\"Bestie Alerts\" to encourage users to view another profile. This feature demonstrates a fun effect and background on the profile, which users may want to unlock themselves by completing their profile.",
                            "I explored friending, but had many concerns about what this feature means for users since Partiful doesn't support messaging or exploring profiles."
                        ]
                    },
                    {
                        "text":  "The other designers also made sketches with ideas for verified badges on fully completed profiles, horiscope birthdays, and popups to prompt users to add information to their profiles."
                    }
                ],
                "full_images": [],
                "inline_images": ["../assets/partiful/sketch.png"]
            },
            {
                "title": "Wireframes",
                "contents": [
                    {
                        "text": "From here, we compiled the sketches into some initial wireframes. We drew inspiration from our sketches pulling from the verified sign on profiles, more customization options, and different ways to build out the mutuals features. Our primary objective was incentivizing users to complete their profile with a photo and more information. We focused on two avenues to achieve this:"
                    },
                    {
                        "list": [
                            "Adding more calls to action and paths to direct users towards editing their profile",
                            "Emphasizing the social connectivity of the platform with the assumption that if you feel like people are actually looking at your profile, you are more likely to care about how it looks."
                        ]
                    },
                    {
                        "text": "For our first objective we added more customizable features since we believe that if people want to edit or fill out one feature on their profile they are more likely to fill out more things since they are already on their profile. Some new features we designed to achieve this included:"
                    },
                    {
                        "list": [
                            "\"Party anthem\" module on the profile page. A fun feature that can help bring people to the edit profile page",
                            "Rebranding birthday month as horoscope on profile page. This feels less revealing of personal info and is more interesting to know",
                            "Adding complete check mark on profile that can unlock new customization features",
                            "Including buttons prompting the user to add socials by default when viewing the user's own profile",
                            "Add new customization options for profile background (similar to event page)"
                        ]
                    }
                ],
                "full_images": ["../assets/partiful/initial_wireframe.png"],
                "inline_images": []
            },
            {
                "title": "User Interviews",
                "contents": [
                    {
                        "text": "Since our demographic is the target audience for Partiful, we decided to ask some of our peers about their experiences with the platform and what might incentivize them to fill out more information."
                    },
                    {
                        "text": "From a group interview as well as some informal one-on-one interviews, our main takeaways were:"
                    },
                    {
                        "list": [
                            "No one we talked to had filled out their profile", 
                            "Many people didn't even realize they had a profile or didn't remember ever being prompted to add a photo",
                            "They didn't understand why adding more information was necessary"
                        ]
                    },
                    {
                        "text": "When we asked about reasons people could be more compelled to include more information some prominent responses included:"
                    },
                    {
                        "list": [
                            "If photos were required in order to see the guest list/reply. Or if other important features were blocked - however \"this would be super annoying\"",
                            "If they had a good reason. We discussed framing socials as a way to connect with people after a party and emphasizing the importance of photos for identifying people who are coming",
                            "If everyone else had a photo/filled out profile"
                        ]
                    }
                ]
            },
            {
                "title": "Wireframe Revision",
                "contents": [
                    {
                        "text": "After creating our initial wireframes, we collected feedback from user interviews, peers, and our contacts at Partiful. We then incorporated this feedback to improve our wireframes. Most of the changes centered around sizing—we removed elements that would have too small touch targets, and column layouts that wouldn't work with smaller screen sizes. We also reprioritized what the most important information to show in each view was, and removed info that was overwhelming."
                    }
                ],
                "full_images": ["../assets/partiful/revised_wireframe.png"]

            },
            {
                "title": "High Fidelity Wireframes",
                "contents": [
                    {
                        "text": "After revisions, we created our final hi-fi wireframes in Figma."
                    },
                    {
                        "links": [
                            {
                                "name": "Figma Flow 1: RSVP and Add Social",
                                "link": "https://www.figma.com/proto/NrxtRs7GuhJVrY6WAFXMMf/Partiful-Profles?page-id=68%3A2197&type=design&node-id=334-16273&viewport=960%2C70%2C0.15&t=5YuKiCAdFb9bh05W-1&scaling=scale-down&starting-point-node-id=334%3A16273&show-proto-sidebar=1&mode=design"
                            },
                            {
                                "name": "Figma Flow 2: Customize Profile",
                                "link": "https://www.figma.com/proto/NrxtRs7GuhJVrY6WAFXMMf/Partiful-Profles?page-id=68%3A2197&type=design&node-id=288-2162&viewport=960%2C70%2C0.15&t=5YuKiCAdFb9bh05W-1&scaling=scale-down&starting-point-node-id=288%3A2162&show-proto-sidebar=1&mode=design"
                            }
                        ]
                    },
                    {
                        "text": "The final design choices that made it into our hi-fi mockups are as follows:"
                    },
                    { 
                        "subsections": [
                            {
                            "title": "Complete check marks",
                            "contents": [
                                {
                                    "text": "Everyone wants the verified blue checkmark on social media platforms like Instagram or Twitter, so we decided to leverage this motivation to incentivize users to complete their profiles. Once a profile is completely filled out, users get a yellow checkmark icon that appears next to their name."
                                }
                            ]
                        },
                        {
                            "title": "Gatekeeping socials",
                            "contents": [
                                {
                                    "text": "Users can't see other user's linked socials unless they have added socials themselves. This incentivizes users to avoid missed connections from parties by adding socials so partiers can get in touch."
                                }
                            ]
                        },
                        {
                            "title": "Updated edit profile flow",
                            "contents": [
                                {
                                    "text": "We added a progress bar to show how complete a user's profile is. This can help inform the user that there still things for them to complete, and to incentive users's to fill up the bar.."
                                }
                            ]
                        },
                        {
                            "title": "Party Anthems",
                            "contents": [
                                {
                                    "text": "We added the option to link a song from Spotify or Apple Music to a profile so that users can share more of their personality! This is a field that we think users will want to complete, which adds more information to their profile page."
                                }
                            ]
                        },
                        {
                            "title": "Pop-ups",
                            "contents": [
                                {
                                    "text": "We believe that adding more prompts with compelling reasons for users to add information will increase the completion of profiles. Adding fun pop-ups can remind the user that they haven't completed their profile while still allowing for easy dismissal in order not to be a burden. Our pop-ups also provide a reason for why Partiful is asking for this information."
                                }
                            ]
                        },
                        {
                            "title": "Customizable background",
                            "contents": [{
                                "text": "Once a user completes all the information from their profile, they unlock customizable backgrounds and particles effects, similar to the events page. The idea is that users will enjoy the fun customization, and therefore be incentivized to complete their profiles."
                            }]
                        },
                        {
                            "title": "Profile Cards",
                            "contents": [{
                                "text": "We modified the guest list of an event from a scrollable section of names and profile pictures, to featuring \"cards\" for each profile. These cards provide users with a fun way to showcase their customized profile settings even when in a list among other users. By expanding the effects of customization beyond a user's profile page, users are further incentivized to complete their profile."
                            }]
                        }]
                    }
                ],
                "full_images": [],
                "inline_images": [],
                "carousel": [
                    {
                        "video": "../assets/partiful/carousel-media/RSVP_Socials.mp4"
                    },
                    {
                        "video": "../assets/partiful/carousel-media/fill_profile.mp4"
                    },
                    {
                        "image": "../assets/partiful/carousel-media/hi-fi-1.png"
                    },
                    {
                        "image": "../assets/partiful/carousel-media/hi-fi-2.png"
                    }
                ]
            },
            {
                "title": "Style Guide",
                "contents": [
                    {
                        "text": "In adding our new features, we developed a style guide to guide our high fidelity mockups. The fonts were explicitely given to us by Partiful; the other elements are modeled around the existing design and shaped to suit our additional features."
                    }
                ],
                "full_images": [],
                "inline_images": []    
            },
            {
                "title": "Startup Feedback",
                "contents": [
                    {
                        "text": "At our meeting with the founders, we were able to have a conversation about both the changes we made to the app and feedback about those changes. They praised certain elements of our design, most notably our flows that rewarded users for filling out their profile information with more customizable options. They also enjoyed our new feature that we titled \"party anthem\", which allows the users to put a song in their profile. However, they expressed that they would like the ability for the song to play continuously while the user was on the profile if that was possible. Interestingly enough, some of our concepts and designs were similar to features that the founders are working on or had considered before, including the idea of different tiers of mutuals (such as displaying the number of shared mutuals two users have). They were interested in the user research we conducted with our peers, and we discussed why users may be hesitant to fill out their profile information and Gen-Z disillusionment with emojis."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }
        ]
    }
]