[
    {
        "name": "Skyryse Internship",
        "frameworks": ["C", "Python", "Simulink", "Matlab", "dSPACE"],
        "timeline": "June-August 2024",
        "role": "Systems Test Engineer Intern with Embedded Software cross-functionality",
        "description_short": "summer internship working with systems test, software, and devops teams",
        "description_long": "During the summer of 2024, I completed a 12-week internship as a System Test Intern in the Skyryse Systems Integration Lab (SIL). During my internship, I worked with the Systems Test, Software, and DevOps teams to advance the SIL's testing capabilities, primarily with telemetry data. I was also selected as one of two interns to travel with Skyryse executives and a small team to launch the Skyryse One at EAA Airventure in Oshkosh, WI. Much of what I worked on is proprietary to Skyryse and protected under an NDA, so I can't share too many technical details about my work.",
        "route": "/skyryse-internship",
        "cover_image": {
            "path": "../assets/skyryse-iternship/skyryse-one.jpg",
            "alt": "The Skyryse One Helicopter"
        },
        "main_image": {
            "path": "../assets/skyryse-iternship/skyryse-intern-class.jpg",
            "alt": "Skyryse summer intern class of 2024 group photo"
        },
        "image_link": "https://www.linkedin.com/posts/molly-mchenry-35a56b235_last-week-i-wrapped-up-my-summer-internship-ugcPost-7235017496443916289-rCan?utm_source=share&utm_medium=member_desktop",
        "sections": [
            {
                "title": "Telemetry",
                "contents": [
                    {
                        "text": "When I started at Skyryse, there were no capabilities for reading live telemetry during systems tests, despite the value that this data lends to understanding the inner workings of the system. My task was simply defined as, \"find a way to read live telemetry data on the SIL.\" While daunting, I was excited to dive into the nitty-gritty technicalities of achieving a Simulink-compatible low-latency UDP parser. The process entailed much ideation of how to build a parser that has low enough latency to handle more than 2000 telemetry data points per 0.025 seconds!"
                    },
                    {
                        "text": "The first major decision I made was to use C for the telemetry parser for two main reasons:"
                    },
                    {                        
                        "list": [
                            "C is a Simulink-compatible language, even if challenging to integrate",
                            "I love programming in C!"
                        ]
                    },
                    {
                        "text": "This choice brought me to another major challenge, however. Skyryse is a startup and development moves quickly, meaning that the telemetry specifications and documentation changes frequently. Although C is a statically typed language, I needed a way to make the parser dynamic to telemetry specification documents after compile time."

                    },
                    {
                        "text": "Solving this problem was a bit of a headache and involved a lot of time bouncing ideas back and forth with my intern mentor. Eventually, it hit me: why not make a Python preprocessor that is capable of reading the necessary documents and updating the C files accordingly? Once I got this idea, I ran with it and began to code a parser that involved a lot of bit logic to read through telemetry UDP packets and also involved significant portions of dynamically allocated memory."
                    },
                    {
                        "text": "I wrapped up the telemetry parser by automating updates to the Simulink model and routing the telemetry data to the necessary hardware. By the end of the summer, we were reading telemetry data live!"
                    },
                    {
                        "hi": ""
                    }
                ],
                "inline_images": [
                    {
                        "path": "../assets/skyryse-iternship/skyryse-one.jpg",
                        "alt": "The Skyryse One, which I was pulling telemetry from"
                    },
                    {
                        "path": "../assets/skyryse-iternship/skyryse-one-cockpit.jpg",
                        "alt": "The Skyryse One's redesigned cockpit"

                    }
                ]
            },
            {
                "title": "NVM Fault Logger Utility",
                "contents": [
                    {
                        "text": "I also worked with the software team to create a utility to read and display fault data stored in NVM on the flight computers in the aircraft. This tool was developed in Python and run on the RTD. I enjoyed challenging myself to abstract the parsing format and outfile specifications of the NVM data so that this tool can continue to be advanced."
                    },
                    {
                        "text": "Working on this utility and developing telemetry capabilities, I discovered my passion for data and backend infrastructure development."
                    }
                ]
            },
            {
                "title": "EAA Airventure Oshkosh",
                "contents": [
                    {
                        "text": "A highlight of my internship was attending EAA Airventure Oshkosh with an amazing team of Skyrysers to debut SkyOS and the Skyryse One."
                    },
                    {
                        "text": "While in Oshkosh, I had the unique opportunity to engage with the public, sharing Skyryse's vision, the capabilities of the Skyryse One, and the need for fly-by-wire technology in general aviation. Witnessing the aviation community's enthusiastic welcome of SkyOS and our mission to eliminate general aviation fatalities was truly inspiring."
                    },
                    {
                        "text": "Working alongside the CEO, VP of Sales, and the team, I learned to communicate technical information in an easily digestible way. As a software engineer, my extroversion and communication are among my most valuable skills, and I am extremely grateful for this opportunity to continue to advance these strengths."
                    }
                ],
                "full_images": [
                    {"path": "../assets/skyryse-iternship/oshkosh-group.jpg", "alt": "Team Skyryse at our EAA Airventure booth"}
                ]
            }
        ]
    },
    {
        "name": "Arduino Hero",
        "frameworks": ["Embedded C", "Python", "SAMD MCUs"],
        "timeline": "2.5 months",
        "role": "Creator, System Engineer, Embedded Software Engineer",
        "description_short": "a homemade version of Guitar Hero built with three MCUs",
        "description_long": "Arduino Hero is a homemade version of Guitar Hero, built using Arduino MCUs. It features a custom LED screen and LCD screen controlled by one Arduino MKR1000, a game controller with another MKR1000, and a music player enabled by an Arduino Uno with a music shield. To play Arduino Hero, strum the console bar while pressing the colored buttons on the controller in time with the music and the corresponding notes moving down the LED screen. Players can choose from a selection of songs and view their stats after gameplay ends.",
        "route": "/ArduinoHero",
        "cover_image": {
            "path": "../assets/arduino-hero/arduino-cover.png",
            "alt": "Image of the system, with LED box, red guitar console, and LCD screen"
        },
        "main_image": {
            "path": "../assets/arduino-hero/arduino-cover.png",
            "alt": "Image of the system, with LED box, red guitar console, and LCD screen"
        },
        "image_link": "https://github.com/NicholasBottone/ArduinoHero",
        "collaborators": "Serena Pulopot, Patrick Ortiz, Nick Bottone, & David Fryd",
        "sections": [
            {
                "title": "Ideation",
                "contents": [
                    {
                        "text": "To start this project, me and a group of friends had the idea to build a fun video game. The idea was to create an embedded system from scratch, using 3D printed materials, wiring, MCUs, and extraneous parts. To accomplish this, we began the development cycle of this embedded system with thorough planning, beginning with defining the system conceptually and then writing formal rules and requirements. As we worked, we created a manual outlining the system to facilitate collaborative development, traceability, system definition, and a smoother integration process."
                    },
                    {
                        "text": "We defined the system as a single-player game where a player can select a song from the start menu, triggering a three-second countdown. Following this countdown, the music starts, and LED notes move down the gameboard in time with the song. A player tries to play the corresponding notes, indicated by color, on the guitar console while strumming the console bar. A player's score, combo, and maximum combo are recorded. Once the song ends, a game over screen is displayed along with scoring data. A player can then choose another song and repeat the cycle."
                    },
                    {
                        "links": [
                            {
                                "name": "Arduino Hero Manual",
                                "link": "../assets/arduino-hero/Arduino_Hero_Manua.pdf"
                            }
                        ]
                    }
                ]
            },
            {
                "title": "Requirements and Architecture",
                "contents": [
                    {
                        "text": "After defining the system conceptually from a user's point of view, I created formal rules and requirements for the system, which can be found in the manual. These requirements define the complete cycle of gameplay, accounting for edge cases such as software hangs and note-scoring latency. Concurrently, my co-developers created architecture diagrams to specify the hardware framework of the system."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }, {
                "title": "State Machine",
                "contents": [
                    {
                        "text": "Next, I created a finite state machine for the Arduino MKR1000 attached to the LED matrix and LCD screen. This MCU controls the game logic and sends messages to the peripheral console and music player. I used the architecture diagram created by one of my co-developers to inform this process. Refer to the manual for descriptions of the transitions labeled in the diagram."
                    },
                    {
                        "text": "I also created a traceability matrix that maps the rules and requirements to each of the guards and transitions in the state machine. This traceability matrix ensured that all system requirements were accounted for and served as a useful reference when writing test cases."
                    }
                ],
                "full_images": [],
                "inline_images": [{
                    "path": "../assets/arduino-hero/state-machine.png",
                    "alt": "state machine diagram with states and labeled adges between them"
                }]
            }, {
                "title": "Guitar Console Assembly",
                "contents": [
                    {
                        "text": "After wrapping up the planning stage, we began to assemble the hardware. I collaborated with one of my co-developers to build the controller using a 3D-printed body featuring buttons soldered to wires that run down the neck of the guitar, attaching to the MKR1000 located in the body. In total, there are seven buttons on the console. Five are in the bridge of the guitar, each corresponding to a color of note, and two in the body that are pressed by pushing the strum bar either up or down."
                    },
                    {
                        "text": "I quickly began writing code to get user input, package it, and send it to the gameboard MCU to be processed in the game logic."
                    }
                ],
                "full_images": [],
                "inline_images": [{
                    "path": "../assets/arduino-hero/guitar-guts.png",
                    "alt": "guitar console without lid, exposing wires, buttons, and breadboard with MCU"
                }]
            },{
                "title": "Guitar Controller Software",
                "contents": [
                    {
                        "text": "First, I wrote a short program that triggers an interrupt when one of the buttons touching the strum bar is pressed. The ISR then polls all seven buttons and creates a byte, populating seven bits according to the buttons pressed. Each button corresponds to one of the bits in the byte and is set to '1' if the button is held down at the time that the interrupt was triggered."
                    },
                    {
                        "text": "This byte is passed to a subroutine that manually sends it to the gameboard Arduino via UART. We chose to multiplex two pins on the gameboard MKR1000 for UART communication with the controller because we were worried about latency issues in communication between the music player and gameboard Arduino, so we reserved the RX and TX pins to run hardware UART communication between those MCUs."
                    }
                ],
                "full_images": [{
                    "path": "../assets/arduino-hero/uart-bus.png",
                    "alt": "UART bus diagram showing a start bit, seven data bits, and a parity bit"
                }],
                "inline_images": []
            }, 
             {
                "title": "Integration",
                "contents": [
                    {
                        "text": "I worked on the integration of both peripherals to the gameboard MCU, working independently on the controller-gameboard integration and with a co-developer on the music player-gameboard integration."
                    },
                    {
                        "subsections": [
                            {
                                "title": "Controller-Gameboard Integration",
                                "contents": [
                                    {
                                        "text": "To integrate the manual UART protocol I created, I wrote software for the gameboard to receive the UART bus sent from the controller. This functionality is in an ISR that is triggered when the receiving pin drops to a low signal since I used an idle-high framework. This ISR then receives the byte, checks it for corruption via parity, and uses it in the game logic if uncorrupted."
                                    },
                                    {
                                        "text": "This integration process was very smooth, which I attribute to the planning done before we touched hardware or software."
                                    }
                                ]
                            },
                            {
                                "title": "Music Player-Gameboard Integration",
                                "contents": [
                                    {
                                        "text": "Integrating the Arduino Uno with the music shield to the gameboard was a more difficult task. We used the RX and TX pins on both MCUs to facilitate hardware UART communication, where the gameboard MCU sends signals to start one of the tracks or to stop the music."
                                    },
                                    {
                                        "text": "We debugged this process by creating testing pathways in the sending and receiving code to only run the core functionality of the communication protocol and using the serial monitor to view the bits being received/sent on both ends. Eventually, through manual testing, we found the bug and successfully integrated these components."
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "full_images": [],
                "inline_images": []
            }, {
                "title": "State Machine Code",
                "contents": [
                    {
                        "text": "I also created the state machine code that ultimately runs the gameboard MCU based on the diagram I created during the planning stage. This process involved me leading my co-developers in fitting the pieces of code we had developed together and testing the system to ensure that it meets all the rules and requirements. I really enjoyed collaborating with my team on this process and seeing the system come together."
                    }
                ],
                "full_images": [],
                "inline_images": [],
                "inline_video": {
                    "path": "../assets/arduino-hero/arduino_hero_demo.mp4",
                    "alt": "video of a user playing Boulevard of Broken Dream by Green Day on Arduino Hero"
                }
            }, {
                "title": "Testing",
                "contents": [
                    {
                        "text": "Throughout the software development process, we performed many manual tests on our components. I created testing pathways in the guitar controller code, state machine code, and integration modules while developing to facilitate manual testing iterations."
                    },
                    {
                        "text": "To wrap up developement, we wrote white box tests for each of the transitions/guards in the finite state machine and also black box testing on the rules and requirements of the system. The white box tests relied on mocked-out functions of LCD output to compare to expected system behavior. We recorded all of the tests in a spreadsheet that maps test cases, requirements, variables, and the status of the test."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }, {
                "title": "Takeaways",
                "contents": [
                    {
                        "text": "Throughout the process of building Arduino Hero, I learned many lessons. From all of the experience and skills that I built, my most important takeaways are:"
                    },
                    {
                        "list": [
                            "The planning stage is the most important of a project.",
                            "I enjoy coordinating integration amongst my co-developers and working to fit all the pieces of a project together.",
                            "Writing extra frameworks for manual testing is extremely valuable for running manual tests.",
                           " Traceability is crucial, especially in the testing stage."
                        ]
                    }
                ],
                "full_images": [],
                "inline_images": []
            }
        ]
    },
    {
        "name": "Music Aggregator",
        "frameworks": ["HTML", "React.js", "CSS"],
        "timeline": "2 weeks",
        "role": "Designer, Frontend Developer",
        "description_short": "song aggregator with filtering and sorting",
        "description_long": "I designed an interface that allows users to filter, sort, and favorite songs and then view their favorite songs in an aggregator. In designing the interface, I first analyzed and compared three desktop music platforms with these features: Spotify, Deezer, and YouTube Music. I then took my findings and created my interface using React.js.",
        "route": "/MusicAggregator",
        "cover_image": {
            "path": "../assets/music-aggregator/music-aggregator-cover.png",
            "alt": "Desktop screen with my music aggregator site"
        },
        "main_image":  {
            "path": "../assets/music-aggregator/my-design.png",
            "alt": "Desktop screen with my music aggregator site"
        },
        "collaborators": "", 
        "image_link": "https://uiux-development.vercel.app/",
        "sections": [
            {
                "title": "Competitor Analysis",
                "contents": [
                    {
                        "text": "First, I analyzed similar platforms that offer music favoriting and aggregation, along with filtering and sorting options. I compiled my findings into a competitive comparison chart to identify what features I want to include in my design."
                    }
                ],
                "full_images": [{
                    "path": "../assets/music-aggregator/comparison-chart.png",
                    "alt": "Comparison chart of Spotify, Deezer, and YouTube Music favoriting, sorting, and filtering functionalities"
                }],
                "inline_images": []
            },
            {
                "title": "Analysis Findings: Strengths & Weaknesses",
                "contents": [
                    {
                        "text": "Spotify's biggest shortcoming is the lack of sorting within lists of songs, both in song exploration and within the liked songs aggregator. Its success lies primarily in the sleekness of the interface, which presents relevant information about each song without over-cluttering the space."
                    },
                    {
                        "text": "On the other hand, Deezer showcases too much information about each song. This clutter of information poses clarity issues and overwhelms users. Deezer's strength, undoubtedly, is its sorting options available for all song lists, both in the liked songs and explore sections."
                    },
                    {
                        "text": "YouTube Music had the weakest UI, in my opinion. The most obvious issue is the lack of efficiency in liking songs: it takes a user three clicks to add a song to the favorited list, and the favoriting feature is hidden within the UI, causing issues with efficiency and learnability. There are also no sorting options within song lists. I enjoy the easy navigation of filtering songs by moods and genres and consider it one of YouTube Music's few successes in terms of UI."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }
            ,
            {
                "title": "Ideation",
                "contents": [
                    {"text": "From the above competitive analysis, I created the following list of factors and designs to incorporate in my design:"},
                    {"list": ["Sorting both within discoverable items and within the aggregator", "Hovering over an item shows favorite button (Spotify)",
                        "Delay after unfavoriting an item before it's removed from the aggregator to allow the user to re-favorite",
                        "Filtering by categories common to items (Youtube Music). In the context of songs, I'd like to expand this to allow for multiple genre filters to be available at once to capture more niche sub-genres and cross-genre spaces.",
                        "I want to incorporate at least one sort based on the qualities of a song (for example, if a song is happy or mellow). This feature will hopefully help users not just sort songs based on their titles or length, but also based on the contents of the songs themselves.",
                        "Liking a song takes a single click",
                        "Hovering and button clicks show extraneous information rather than having it visible at all times for each song"]
                    }
                ],
                "full_images": [],
                "inline_images": []
            },
            {
                "title": "Low Fidelity Wireframe",
                "contents": [
                    {
                        "text": "Using these ideas, I created a basic sketch in Figma of the general layout of my page. I created my design to allow users to easily navigate a song discovery panel by having the option to filter and sort. Note that the information necessary for the filters is intended to be displayed in a popup once the user hits the info button on the item card. Also, I elected to only feature sorting in the aggregator because the filter bubbles take up a significant amount of vertical space and make the section look cluttered."
                    }
                ],
                "full_images": [],
                "inline_images": [{
                    "path": "../assets/music-aggregator/mockup.png",
                    "alt": "Low fidelity wireframe featuring an explore panel with songs displayed by cover art and a favorites aggregator panel with the list of favorited songs"
                }]
            },
            {
                "title": "Development",
                "contents": [
                    {
                        "text": "From this wireframe, I then began coding! I created a React.js web application and dynamically updated liked song histories and filtered/sorted song lists. Additionally, I used the Spotify API to retrieve song data for the song bank used in this web app. I chose the filtering options based on my previous competitive analysis and the data available through the API."
                    }
                ],
                "full_images": [{
                    "path": "../assets/music-aggregator/my-design.png",
                    "alt": "Finished site with explore panel and favorite songs aggregator panel"
                }],
                "inline_images": []
            },
            {
                "title": "Takeaways",
                "contents": [
                    {
                        "text": "Through this project, I learned to balance information necessary for sorting, filtering, and aggregation with good design so that the page doesn't become cluttered and visually overwhelming for users. I also learned the considerations competing song aggregators have to be mindful of when presenting information and interfaces to users."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }
        ]
    }, 
    {
        "name": "Search Engine",
        "frameworks": ["Python"],
        "timeline": "2 weeks",
        "role": "Software Engineer",
        "description_short": "A modern search engine that indexes and retrieves information from Wikipedia pages.",
        "description_long": "I created a search engine capable of sifting through large amounts of data and quickly delivering relevant results. This project involved developing two main components: the indexer and the querier, which are responsible for pre-processing and query handling, respectively. This project was a deep dive into search algorithms and user-centric design, balancing technical efficiency with user experience.",
        "route": "/SearchEngine",
        "cover_image": {
            "path": "../assets/search-engine/search-mockup.png",
            "alt": "Cover image of the Search Engine project"
        },
        "main_image": {
            "path": "../assets/search-engine/search-mockup.png",
            "alt": "Main image showcasing the Search Engine interface"
        },
        "image_link": "https://github.com/NicholasBottone/ArduinoHero",
        "collaborators": "Allie Masthay",
        "sections": [
            {
                "title": "Structure",
                "contents": [
                    {
                        "text": "The final use case looks like the following: a user enters a free text query, and the engine returns what it judges to be the most relevant pages for that query. To accomplish this, there indexer and querier comopnents are structured to optimize response time of the engine to user entries."
                    },
                    {
                        "text": "The indexer preprocesses the corpus before answering any queries, saving files with information about which documents are relevant to which words. It parses XML data, optimizes queries through stop-word removal and stemming, and takes around 10 minutes for pre-processing to ensure instantaneous query responses"
                    },
                    {
                        "text": "The querier interacts with user input, receiving a query from a user and referencing the files created by the indexer in preprocessing to quickly respond to that query. The querier component retrieves top articles based on relevance, mirroring sophisticated methods used by leading search engines."
                    }
                ],
                "full_images": [
                    {
                        "path": "../assets/search-engine/program-structure-diagram.png",
                        "alt": "structure diagram of search engine"
                    }
                ],
                "inline_images": []
            },
            {
                "title": "Indexer",
                "contents": [
                    {
                        "text": "The indexer is the backbone of the search engine, responsible for processing the raw data from the XML files and transforming it into a structured format that can be efficiently queried. I began by parsing the XML documents, extracting essential elements such as titles, IDs, and the body text."
                    },
                    {
                        "text": "To enhance the search experience, I implemented techniques like stop-word removal, which filters out common words that do not contribute to the meaning of the queries, and stemming, which reduces words to their base or root form. This preprocessing step is crucial as it significantly reduces the size of the dataset and improves the relevance of search results."
                    },
                    {
                        "text": "The indexer also builds a mapping of terms to documents, allowing for quick lookups during the querying phase. I utilized Python's data structures to efficiently store and retrieve this information, ensuring that the indexing process, while time-consuming, would not hinder the user experience during searches."
                    }
                ],
                "full_images": [],
                "inline_images": []
            },
            {
                "title": "Querier",
                "contents": [
                    {
                        "text": "The querier is the user-facing component of the search engine, designed to handle incoming search queries and return relevant results. Once the indexer has processed the data, the querier utilizes the pre-built index to quickly find and rank documents based on their relevance to the user's query."
                    },
                    {
                        "text": "I focused on creating a user-friendly interface that allows users to input their queries seamlessly. The querier processes the input by tokenizing the query, applying the same stop-word removal and stemming techniques used in the indexer to ensure consistency in how queries are matched against the indexed data."
                    },
                    {
                        "text": "To rank the results, I implemented a simple scoring mechanism that considers factors such as term frequency and document relevance. This scoring system is designed to mimic more complex algorithms like PageRank, providing users with a list of the top articles that best match their search terms."
                    },
                    {
                        "text": "The querier also includes error handling to manage invalid inputs gracefully, ensuring a smooth user experience. By iterating on the design and functionality of the querier, I was able to create a robust system that effectively meets user needs."
                    }
                ],
                "full_images": [],
                "inline_images": [
                    {
                        "path": "../assets/search-engine/pagerank-diagram.jpg",
                        "alt": "page rank algorithm example graph"
                    }
                ]
            },
            {
                "title": "Challenges and Learning",
                "contents": [
                    {
                        "text": "I faced challenges optimizing the indexing process to handle large datasets without sacrificing performance, leading to valuable lessons in problem-solving and efficiency."
                    },
                    {
                        "text": "The pre-processing time, while significant, was a strategic choice that ultimately led to a smoother and faster search experience."
                    }
                ],
                "full_images": [],
                "inline_images": []
            }
        ]
    }
]